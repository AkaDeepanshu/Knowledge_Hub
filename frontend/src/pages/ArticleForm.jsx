import { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { articleAPI } from '../utils/api';
import { useAuth } from '../context/AuthContext';
import './ArticleForm.css';

const ArticleForm = () => {
  const { id } = useParams(); // If id exists, we're editing
  const navigate = useNavigate();
  const { user, isAdmin } = useAuth();
  
  const isEditMode = !!id;
  
  const [formData, setFormData] = useState({
    title: '',
    content: '',
    tags: '',
    summary: '',
  });
  
  const [loading, setLoading] = useState(false);
  const [fetchingArticle, setFetchingArticle] = useState(false);
  const [error, setError] = useState('');
  const [validationErrors, setValidationErrors] = useState({});

  // Fetch article if in edit mode
  useEffect(() => {
    if (isEditMode) {
      fetchArticle();
    }
  }, [id]);

  const fetchArticle = async () => {
    try {
      setFetchingArticle(true);
      setError('');
      const response = await articleAPI.getArticleById(id);
      const article = response.data.data.article;
      
      // Check if user can edit this article
      if (!isAdmin() && article.createdBy._id !== user._id) {
        setError('You do not have permission to edit this article.');
        return;
      }
      
      setFormData({
        title: article.title,
        content: article.content,
        tags: article.tags.join(', '),
        summary: article.summary || '',
      });
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to load article');
    } finally {
      setFetchingArticle(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
    // Clear validation error for this field
    if (validationErrors[name]) {
      setValidationErrors({
        ...validationErrors,
        [name]: '',
      });
    }
    setError('');
  };

  const validateForm = () => {
    const errors = {};
    
    if (!formData.title.trim()) {
      errors.title = 'Title is required';
    } else if (formData.title.length < 5) {
      errors.title = 'Title must be at least 5 characters';
    }
    
    if (!formData.content.trim()) {
      errors.content = 'Content is required';
    } else if (formData.content.length < 50) {
      errors.content = 'Content must be at least 50 characters';
    }
    
    // Summary is now optional - can be generated by AI later
    if (formData.summary.trim() && formData.summary.length < 20) {
      errors.summary = 'Summary must be at least 20 characters if provided';
    } else if (formData.summary.length > 500) {
      errors.summary = 'Summary must not exceed 500 characters';
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);
    
    try {
      // Parse tags
      const tagsArray = formData.tags
        .split(',')
        .map(tag => tag.trim())
        .filter(tag => tag.length > 0);
      
      const articleData = {
        title: formData.title.trim(),
        content: formData.content.trim(),
        tags: tagsArray,
        summary: formData.summary.trim() || undefined, // Don't send empty string
      };
      
      if (isEditMode) {
        // Update existing article
        await articleAPI.updateArticle(id, articleData);
        navigate(`/articles/${id}`);
      } else {
        // Create new article
        const response = await articleAPI.createArticle(articleData);
        const newArticleId = response.data.data.article._id;
        navigate(`/articles/${newArticleId}`);
      }
    } catch (err) {
      setError(err.response?.data?.message || `Failed to ${isEditMode ? 'update' : 'create'} article`);
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    if (isEditMode) {
      navigate(`/articles/${id}`);
    } else {
      navigate('/dashboard');
    }
  };

  if (fetchingArticle) {
    return (
      <div className="article-form-container">
        <div className="loading-state">
          <div className="spinner"></div>
          <p>Loading article...</p>
        </div>
      </div>
    );
  }

  if (error && isEditMode) {
    return (
      <div className="article-form-container">
        <div className="error-state">
          <h2>Error</h2>
          <p>{error}</p>
          <Link to="/dashboard" className="btn-primary">
            Back to Dashboard
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="article-form-container">
      <div className="article-form-wrapper">
        <div className="form-header">
          <h1>{isEditMode ? '‚úèÔ∏è Edit Article' : '‚ûï Create New Article'}</h1>
          <p className="form-subtitle">
            {isEditMode 
              ? 'Update your article details below' 
              : 'Fill in the details to create a new article'
            }
          </p>
        </div>

        {error && <div className="error-message">{error}</div>}

        <form onSubmit={handleSubmit} className="article-form">
          {/* Title Field */}
          <div className="form-group">
            <label htmlFor="title">
              Title <span className="required">*</span>
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              placeholder="Enter article title"
              className={validationErrors.title ? 'input-error' : ''}
            />
            {validationErrors.title && (
              <span className="field-error">{validationErrors.title}</span>
            )}
          </div>

          {/* Tags Field */}
          <div className="form-group">
            <label htmlFor="tags">
              Tags <span className="optional">(optional)</span>
            </label>
            <input
              type="text"
              id="tags"
              name="tags"
              value={formData.tags}
              onChange={handleChange}
              placeholder="e.g., react, javascript, tutorial (comma-separated)"
            />
            <span className="field-hint">
              Separate multiple tags with commas
            </span>
          </div>

          {/* Content Field */}
          <div className="form-group">
            <label htmlFor="content">
              Content <span className="required">*</span>
            </label>
            <textarea
              id="content"
              name="content"
              value={formData.content}
              onChange={handleChange}
              placeholder="Write your article content here..."
              rows={12}
              className={validationErrors.content ? 'input-error' : ''}
            />
            {validationErrors.content && (
              <span className="field-error">{validationErrors.content}</span>
            )}
            <span className="field-hint">
              {formData.content.length} characters (minimum 50)
            </span>
          </div>

          {/* Summary Field */}
          <div className="form-group">
            <label htmlFor="summary">
              Summary <span className="optional">(optional - can be AI-generated)</span>
            </label>
            <textarea
              id="summary"
              name="summary"
              value={formData.summary}
              onChange={handleChange}
              placeholder="Write a brief summary or leave blank to generate using AI after creating the article"
              rows={4}
              className={validationErrors.summary ? 'input-error' : ''}
              maxLength={500}
            />
            {validationErrors.summary && (
              <span className="field-error">{validationErrors.summary}</span>
            )}
            <span className="field-hint">
              {formData.summary.length}/500 characters (optional, can be generated by AI)
            </span>
          </div>

          {/* Info Box */}
          <div className="info-box">
            <div className="info-icon">‚ú®</div>
            <div className="info-content">
              <strong>AI Summary:</strong> You can leave the summary field empty and use AI to generate it automatically after creating the article. Just click the "Generate Summary" button on the article page!
            </div>
          </div>

          {/* Form Actions */}
          <div className="form-actions">
            <button
              type="button"
              onClick={handleCancel}
              className="btn-cancel"
              disabled={loading}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="btn-submit"
              disabled={loading}
            >
              {loading ? (
                <>
                  <span className="spinner-small"></span>
                  {isEditMode ? 'Updating...' : 'Creating...'}
                </>
              ) : (
                <>
                  {isEditMode ? 'üíæ Update Article' : '‚ú® Create Article'}
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ArticleForm;
